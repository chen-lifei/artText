const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const cookieParser = require('cookie-parser');
const favicon = require('serve-favicon');
const compression = require('compression');
const microcache = require('route-cache');
const config = require('./conf/config');
const login_filter = require('./model/login_filter.js');
const logger = require('./model/log.js');
const querystring = require('querystring');

const resolve = file => path.resolve(__dirname, file);
const {	createBundleRenderer } = require('vue-server-renderer');
const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';

const app = express();

function createRenderer(bundle, options) {
	// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
	return createBundleRenderer(bundle, Object.assign(options, {
		// for component caching
		cache: LRU({
			max: 1000,
			maxAge: 1000 * 60 * 15
		}),
		// this is only needed when vue-server-renderer is npm-linked
		basedir: resolve('./dist'),
		// recommended for performance
		runInNewContext: false
	}))
}

let renderer
let readyPromise
const templatePath = resolve('index.template.html')
if(isProd) {
	// In production: create server renderer using template and built server bundle.
	// The server bundle is generated by vue-ssr-webpack-plugin.
	const template = fs.readFileSync(templatePath, 'utf-8')
	const bundle = require('./dist/vue-ssr-server-bundle.json')
	// The client manifests are optional, but it allows the renderer
	// to automatically infer preload/prefetch links and directly add <script>
	// tags for any async chunks used during render, avoiding waterfall requests.
	const clientManifest = require('./dist/vue-ssr-client-manifest.json')
	renderer = createRenderer(bundle, {
		template,
		clientManifest
	})
} else {
	// In development: setup the dev server with watch and hot-reload,
	// and create a new renderer on bundle / index template update.
	readyPromise = require('./build/setup-dev-server')(
		app,
		templatePath,
		(bundle, options) => {
			renderer = createRenderer(bundle, options)
		}
	)
}

const serve = (path, cache) => express.static(resolve(path), {
	maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})
app.use(compression({
	threshold: 0
}))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
// app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use(cookieParser());

app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render(req, res) {
    const s = Date.now();
	res.setHeader("Content-Type", "text/html");
	res.setHeader("Server", "express4+");
	const handleError = err => {
		if(err.url) {
			res.redirect(err.url)
		} else if(err.code === 404) {
			//res.status(404).send('404 | Page Not Found')
			res.redirect('/404/');
		} else {
			// Render Error Page or Redirect
			res.status(500).send('500 | Internal Server Error');
			console.error(`error during render : ${req.url}`);
			console.error(err.stack);
		}
    };
	const context = {
		title: '吾道', // default title
        url: req.url,
        host: req.headers.host,
        protocol: req.get("X-Forwarded-Proto"),
		render: {
			meta: function(){}
		}
	};
	renderer.renderToString(context, (err, html) => {
		if(err) return handleError(err);
		res.send(html);
		if(!isProd) {
			console.log(`whole request: ${Date.now() - s}ms`)
		}
	})
}

// 未登陆处理
function not_login_callback(req, res, err) {
	//判断是否是ajax请求
	if(req.headers['x-requested-with'] && req.headers['x-requested-with'].toLowerCase() == 'xmlhttprequest') {
		// 是AJAX请求
		return {
			"type": "notLogin",
			"content": "未登录"
		}
	} else {
		// 自动登录
		res.redirect("//"+req.hostname+'/api/login/redirect/?redirectUrl=' + encodeURIComponent(req.url));
	}
}
// 设备跳转
function device_redirect(req, res){
	// 不处理ajax请求
	let is_xml_http = req.headers['x-requested-with'] && req.headers['x-requested-with'].toLowerCase() === 'xmlhttprequest';
	if (is_xml_http) {
		return false;
	}
	let hostname = req.protocol + '://' + req.hostname;
	let path = hostname + req.path;
	let search = (req.url.indexOf('?') > 0) ? req.url.substring(req.url.indexOf('?')) : '';
	let ua = (Object.keys(req.headers).indexOf('user-agent') < 0) ? '' : Object.values(req.headers)[Object.keys(req.headers).indexOf('user-agent')];
	let is_mobile = /(Mobile|miniProgram)/gi.test(ua);
	let redirect_index = true;
	let url_reg_arr = [
		`/edit/?`,
		`/upgrade/?`,
		`/member/upgrade/?`,
		`/member/order/?`,
		`/help/?`,
		`/help/detail/?`,
		`/document/slides/\\d+/?`,
		`/template/slides/\\d+/?`,
		`/works/slides/\\d+/?`,
		`/h5/slides/\\d+/?`,
		`/platform/slides/?\?`,
		`/payment/result?\?`,
        `/home/?`
	];
	// pc访问mobile页面
	if (!is_mobile && path.indexOf('/mobile') >= 0) {
		for (let i = 0; i < url_reg_arr.length; i++) {
			let item = url_reg_arr[i];
			if (new RegExp(item).test(path)) {
				res.redirect((path + search).replace('/mobile', ''));
				redirect_index = false;
				break;
			}
		}
		if (redirect_index) res.redirect(`/${search}`);
		return true;
	}
	// 手机访问pc页面
	if (is_mobile && path.indexOf('/mobile') < 0) {
		for (let i = 0; i < url_reg_arr.length; i++) {
			let item = url_reg_arr[i];
			if (new RegExp(item).test(path)) {
				res.redirect((path + search).replace(hostname, `${hostname}/mobile`));
				redirect_index = false;
				break;
			}
		}
		if (redirect_index) res.redirect(`/mobile/${search}`);
		return true;
	}
	return false;
}

//监控接口
app.get('/monitoring', function(req, res){
	res.send('i\'m runing!');
});

//生成JWT token
app.get('/member/generatedWsToken/',function(req, res){
	try{
		res.setHeader("Content-Type", "text/html");
		res.setHeader("Server", "express4+");
		let data = {
			host: config.wsHost,
			token: "123456"
		}
		let promise = login_filter(req, res);
		promise.then(function(str) {
			data['token'] = generatedWsToken();
			res.status(200).send(querystring.stringify(data));
		}, function(err) {
			console.error("app url filter err:" + err);
			res.status(200).send(querystring.stringify(data));
		});
	}catch(e){
		console.error("app url filter exception:" + e);
		res.status(200).send(querystring.stringify(data));
	}
});
function generatedWsToken(){
	try{
		let jwt = require('jsonwebtoken');
		return jwt.sign({ wsHost: config.wsHost, wsUsername: config.wsUsername}, config.wsTokenSecret, { expiresIn: config.wsTokenExpiresIn });
	}catch(e){
		console.error("generatedWsToken exception:" + e);
		return "123456";
	}
}

//文档备份服务签名
app.get('/document_backup/service_auth_sign/',function(req, res){
	let service_auth_sign = null;
	try{
		res.setHeader("Content-Type", "text/html");
		res.setHeader("Server", "express4+");
		let type = req.query.type;//认证类型
		let documentId = req.query.documentId;
		let memberId = req.query.memberId;
		if(type === 'backup' && documentId && memberId){
			const crypto = require('crypto');
			const hash = crypto.createHash('md5');
			hash.update((documentId + memberId).split("").reverse().join("") + "59jlDihJ");
			service_auth_sign = hash.digest('hex');
		}
	}catch(e){
		console.error(e);
	}
	res.status(200).send(JSON.stringify({service_auth_sign:service_auth_sign}));
});

app.get('*', function(req, res) {
	// 检测设备跳转
	let is_device_redirect=device_redirect(req, res);
	if(!is_device_redirect){
		try{
			//登陆拦截过滤
			let promise = login_filter(req, res);
			promise.then(function(str) {
				isProd ? render(req, res) : readyPromise.then(() => render(req, res))
			}, function(err) {
				console.error("err:"+err);
				not_login_callback(req, res, err);
			});
		}catch(e){
			console.error("app url filter err:"+err);
		}
	}
	

});

const port = process.env.PORT || 9191;
app.listen(port, () => {
	console.log(`server started at port:${port}`)
});